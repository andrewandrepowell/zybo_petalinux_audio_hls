// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir_operator_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv6_1F = 6'b11111;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv6_3F = 6'b111111;
parameter    ap_const_lv6_0 = 6'b000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_23;
reg   [4:0] fir1_shift_reg_address0;
reg    fir1_shift_reg_ce0;
reg    fir1_shift_reg_we0;
reg   [31:0] fir1_shift_reg_d0;
wire   [31:0] fir1_shift_reg_q0;
wire   [4:0] c_address0;
reg    c_ce0;
wire  signed [14:0] c_q0;
wire  signed [31:0] i_cast_fu_113_p1;
reg  signed [31:0] i_cast_reg_172;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_59;
wire   [0:0] tmp_2_fu_125_p2;
reg   [0:0] tmp_2_reg_181;
wire   [0:0] tmp_fu_117_p3;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_78;
wire   [5:0] grp_fu_106_p2;
reg   [5:0] i_1_reg_203;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_93;
wire   [31:0] acc_1_fu_160_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_102;
wire   [5:0] i_phi_fu_76_p4;
reg   [5:0] i_reg_72;
reg   [31:0] acc_reg_84;
reg  signed [31:0] m1_reg_96;
wire   [63:0] tmp_4_fu_131_p1;
wire   [63:0] tmp_6_fu_142_p1;
wire   [0:0] tmp_5_fu_136_p2;
wire   [63:0] tmp_7_fu_146_p1;
reg   [5:0] grp_fu_106_p0;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
#0 ap_return_preg = 32'b00000000000000000000000000000000;
end

fir_operator_s_fir1_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 31 ),
    .AddressWidth( 5 ))
fir1_shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fir1_shift_reg_address0),
    .ce0(fir1_shift_reg_ce0),
    .we0(fir1_shift_reg_we0),
    .d0(fir1_shift_reg_d0),
    .q0(fir1_shift_reg_q0)
);

fir_operator_s_c #(
    .DataWidth( 15 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0)
);

fir_mul_15s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_15s_32s_32_3_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_q0),
    .din1(m1_reg_96),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv32_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_117_p3 == 1'b0))) begin
            ap_return_preg <= acc_reg_84;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        acc_reg_84 <= acc_1_fu_160_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        acc_reg_84 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        i_reg_72 <= i_1_reg_203;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_72 <= ap_const_lv6_1F;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_2_reg_181 == 1'b0))) begin
        m1_reg_96 <= fir1_shift_reg_q0;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_117_p3 == 1'b0) & ~(tmp_2_fu_125_p2 == 1'b0))) begin
        m1_reg_96 <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_1_reg_203 <= grp_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_cast_reg_172 <= i_cast_fu_113_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_117_p3 == 1'b0))) begin
        tmp_2_reg_181 <= tmp_2_fu_125_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_117_p3 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_117_p3 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_117_p3 == 1'b0))) begin
        ap_return = acc_reg_84;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (ap_sig_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_59) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_78) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_93) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_102) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        fir1_shift_reg_address0 = tmp_6_fu_142_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_117_p3 == 1'b0) & ~(tmp_2_fu_125_p2 == 1'b0))) begin
        fir1_shift_reg_address0 = ap_const_lv5_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        fir1_shift_reg_address0 = tmp_4_fu_131_p1;
    end else begin
        fir1_shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        fir1_shift_reg_ce0 = 1'b1;
    end else begin
        fir1_shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        fir1_shift_reg_d0 = fir1_shift_reg_q0;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_117_p3 == 1'b0) & ~(tmp_2_fu_125_p2 == 1'b0))) begin
        fir1_shift_reg_d0 = x;
    end else begin
        fir1_shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_117_p3 == 1'b0) & ~(tmp_2_fu_125_p2 == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_2_reg_181 == 1'b0) & (1'b0 == tmp_5_fu_136_p2)))) begin
        fir1_shift_reg_we0 = 1'b1;
    end else begin
        fir1_shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        grp_fu_106_p0 = i_reg_72;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        grp_fu_106_p0 = i_phi_fu_76_p4;
    end else begin
        grp_fu_106_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(tmp_fu_117_p3 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_160_p2 = (grp_fu_154_p2 + acc_reg_84);

always @ (*) begin
    ap_sig_102 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_23 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_59 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_78 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_93 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign c_address0 = tmp_7_fu_146_p1;

assign grp_fu_106_p2 = ($signed(grp_fu_106_p0) + $signed(ap_const_lv6_3F));

assign i_cast_fu_113_p1 = $signed(i_reg_72);

assign i_phi_fu_76_p4 = i_reg_72;

assign tmp_2_fu_125_p2 = ((i_reg_72 == ap_const_lv6_0) ? 1'b1 : 1'b0);

assign tmp_4_fu_131_p1 = grp_fu_106_p2;

assign tmp_5_fu_136_p2 = ((i_reg_72 == ap_const_lv6_1F) ? 1'b1 : 1'b0);

assign tmp_6_fu_142_p1 = $unsigned(i_cast_reg_172);

assign tmp_7_fu_146_p1 = $unsigned(i_cast_reg_172);

assign tmp_fu_117_p3 = i_reg_72[ap_const_lv32_5];

endmodule //fir_operator_s
